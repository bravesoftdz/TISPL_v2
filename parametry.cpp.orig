//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "parametry.h"
#include "unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "rHTMLLabel"
#pragma link "rImprovedComps"
#pragma link "scControls"
#pragma link "scGPControls"
#pragma link "scGPExtControls"
#pragma resource "*.dfm"
TForm_parametry *Form_parametry;
//---------------------------------------------------------------------------
__fastcall TForm_parametry::TForm_parametry(TComponent* Owner)
	: TForm(Owner)
{
  //nové nastavení barvy formuláøe
	Form_parametry->Color=(TColor)RGB(240,240,240);

	//pøevzetí defaultní velikosti formuláøe z designu pro další užití (slouží spíše pro usnadnìní vývoje, než funkènì)
	defaultForm_parametryHeight=Form_parametry->Height;

	//matamaticky exaktní napozicování tlaèítek OK a storno
	Form1->m.designButton(scGPButton_OK,Form_parametry,1,2);
	Form1->m.designButton(scGPButton_storno,Form_parametry,2,2);
<<<<<<< HEAD
=======

	navrhar=true;//prozatim

//	//asi již k nièemu:
//	SG="PT - èistý technologický výrobní èas=0\nMT - èas pøesouvání produktu=0\nWT - doba èekání vozíku=0\nIT - doba kontroly vozíku=0\nQT - doba èekání ve frontì=0\n...=""";
//	K="délka dopravníku [m]=0";
//	P="WT - doba èekání vozíku=0";
//
//	novy_parametr_n=0;
>>>>>>> 128fdacbd64080aed1f135285da638dc188d96e9
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::FormShow(TObject *Sender)
{
	minsec=MIN;scGPButton_min_sec->Caption="na sec";//formuláø bude po zobrazení v minutách
	input_state=NOTHING;//nutnost
	kapacitaSG=1;//není podnìt k rozkládání na více objektù
	scGPEdit_name->SetFocus();//nastaví výchozí focus, kde se pøedpokládá výchozí nastavování
	scGPEdit_name->SelectAll();//oznaèí cele pro editace
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void TForm_parametry::vypis(UnicodeString text,bool RED)
{
	if(text!="")//zobrazí a vypíše
	{
		//if(!rHTMLLabel_InfoText->Visible)Form_parametry->Height+=(40+19);//pouze pokud byl popisek skrytý
		if(RED)
		{
			scGPGlyphButton_InfoIcon->GlyphOptions->NormalColor=clRed;
			rHTMLLabel_InfoText->Font->Color=clRed;
		}
		else
		{
			scGPGlyphButton_InfoIcon->GlyphOptions->NormalColor=(TColor)RGB(0,128,255);
			rHTMLLabel_InfoText->Font->Color=(TColor)RGB(0,128,255);
		}
		scGPGlyphButton_InfoIcon->Top=Form_parametry->Height-76;
		scGPGlyphButton_InfoIcon->Visible=true;
		rHTMLLabel_InfoText->Top=Form_parametry->Height-69;
		rHTMLLabel_InfoText->Visible=true;
		rHTMLLabel_InfoText->Caption=text;
	}
	else//skryje
	{
		scGPGlyphButton_InfoIcon->Visible=false;
		rHTMLLabel_InfoText->Visible=false;
		//Form_parametry->Height-=(40+19);
	}
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::scComboBox_rezimChange(TObject *Sender)
{
	if(input_state!=NO)//pøi startu
	{
			//nadesignování a napozicování dle zvoleného režimu
			setForm4Rezim(scComboBox_rezim->ItemIndex);//resize a napozicování formuláøe+povoleni a zakazani komponent pro jednotlivé režimy
			//aktualizace hodnot
			if(scGPNumericEdit_CT->Value>0)input_CT();
			else
			{
				if(scGPNumericEdit_delka_dopravniku->Value>0)input_DD();
				else
				{
					 if(scGPNumericEdit_kapacita->Value>0)input_K();
					 else input_RD();
				}
			}
	}
}
//---------------------------------------------------------------------------
//resize a napozicování formuláøe+povoleni a zakazani komponent pro jednotlivé režimy
void TForm_parametry::setForm4Rezim(unsigned short rezim)
{
	//výchozí zmenšení formuláøe
	offset=0;
	if (Form1->STATUS==Form1->NAVRH) rezim+=10;//posunutí o 10 vytváøí režim+navrháø
	switch(rezim)
	{
		 case 0://STOP & GO
		 {
			 set(POHON,ENABLED);
			 set(TIME,HIDE);
			 set(RYCHLOST,HIDE);
			 set(DELKA,READONLY);
			 set(KAPACITA,READONLY);
			 set(ODCHYLKA,ENABLED);
			 set(CEKANI,ENABLED);
			 set(STOPKA,ENABLED);
			 scGPNumericEdit_kapacita->Value=1;
		 }break;
		 case 10://STOP & GO - NÁVRHÁØ
		 {
			 //nastavení komponent
			 set(POHON,HIDE);
			 set(TIME,ENABLED);
			 set(RYCHLOST,HIDE);
			 set(DELKA,HIDE);
			 set(KAPACITA,READONLY);
			 set(ODCHYLKA,HIDE);
			 set(CEKANI,HIDE);
			 set(STOPKA,HIDE);
			 scGPNumericEdit_kapacita->Value=1;
		 }break;
		 case 1://KONTINUÁLNÍ
		 {

		 }break;
		 case 11://KONTINUÁLNÍ - NÁVRHÁØ
		 {
			 set(POHON,HIDE);
			 set(TIME,ENABLED);
			 set(RYCHLOST,ENABLED);
			 set(DELKA,ENABLED);
			 set(KAPACITA,ENABLED);
			 set(ODCHYLKA,HIDE);
			 set(CEKANI,HIDE);
			 set(STOPKA,HIDE);
		 }break;
		 case 2://POSTPROCESNÍ
		 {

		 }break;
		 case 12://POSTPROCESNÍ - NÁVRHÁØ
		 {
			 set(POHON,HIDE);
			 set(TIME,ENABLED);
			 set(RYCHLOST,HIDE);
			 set(DELKA,ENABLED);
			 set(KAPACITA,ENABLED);
			 set(ODCHYLKA,HIDE);
			 set(CEKANI,HIDE);
			 set(STOPKA,HIDE);
		 }break;
	}

	//VELIKOST FORMULÁØE
	Form_parametry->Height=defaultForm_parametryHeight+offset;
	//vertikální POZICE TLAÈÍTEK OK A STORNO
	scGPButton_OK->Top=Form_parametry->Height-scGPButton_OK->Height-10;
	scGPButton_storno->Top=Form_parametry->Height-scGPButton_storno->Height-10;
}
//---------------------------------------------------------------------------
void TForm_parametry::set(Tcomponents C,Tcomponents_state S)
{
	//defaultní hodnoty
	short O=40;//vertikální velikost odsazení komponent
	int L=rHTMLLabel_rezim->Top;//výchozí komponenta
	int P=scComboBox_rezim->Top;//výchozí komponenta
	TColor hl_color=(TColor)RGB(255,141,28);//barva zvýraznìní rámeèku komponenty napø.pro povinné položky
	short hlFrameWidth=2;//šíøka zvýraznìní rámeèku komponenty napø.pro povinné položky

	switch (C)
	{
		case POHON:
		{
			//pozice
			rHTMLLabel_pohon->Top=L+O;
			scComboBox_pohon->Top=P+O;
			//funkèní vlastnosti
			switch (S)
			{
				case ENABLED:	rHTMLLabel_pohon->Visible=true;scComboBox_pohon->Visible=true;scComboBox_pohon->Enabled=true;break;
				case DISABLED:rHTMLLabel_pohon->Visible=true;scComboBox_pohon->Visible=true;scComboBox_pohon->Enabled=false;break;
				case READONLY:rHTMLLabel_pohon->Visible=true;scComboBox_pohon->Visible=true;scComboBox_pohon->Enabled=false;break;
				case HIDE:		rHTMLLabel_pohon->Visible=false;scComboBox_pohon->Visible=false;offset-=O;break;
			}
		}	break;
		case TIME://technologický èas v režimu návrháø
		{
		 ////pozice
			rHTMLLabel_CT->Top=L+2*O+offset;
			scGPNumericEdit_CT->Top=P+2*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			scGPNumericEdit_CT->Options->ShapeStyle=scgpessRect;
			rHTMLLabel_CT->Visible=true;scGPNumericEdit_CT->Enabled=true;scGPNumericEdit_CT->Visible=true;
			//scGPNumericEdit_CT->Options->FrameColor=clGray;
			scGPNumericEdit_CT->Options->FrameWidth=1;
			//ty co jsou rozdílné
			switch (S)
			{
				case HIGHLIGHT:/*scGPNumericEdit_CT->Options->FrameColor=hl_color;*/scGPNumericEdit_CT->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scGPNumericEdit_CT->Enabled=false;break;
				case READONLY:scGPNumericEdit_CT->Enabled=false;break;
				case HIDE:		rHTMLLabel_CT->Visible=false;scGPNumericEdit_CT->Visible=false;offset-=O;break;
			}
		}	break;
		case RYCHLOST://RD v režimu návrháø
		{
		 ////pozice
			rHTMLLabel_RD->Top=L+3*O+offset;
			scGPNumericEdit_RD->Top=P+3*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			scGPNumericEdit_RD->Options->ShapeStyle=scgpessRect;
			rHTMLLabel_RD->Visible=true;scGPNumericEdit_RD->Visible=true;scGPNumericEdit_RD->Enabled=true;
			//ty co jsou rozdílné
			switch (S)
			{
				case ENABLED:	break;
				case DISABLED:scGPNumericEdit_RD->Enabled=false;break;
				case READONLY:scGPNumericEdit_CT->Options->ShapeStyle=scgpessNone;scGPNumericEdit_RD->Enabled=false;break;
				case HIDE:		rHTMLLabel_RD->Visible=false;scGPNumericEdit_RD->Visible=false;offset-=O;break;
			}
		}	break;
		case DELKA://délka dopravníku
		{
		 ////pozice
			rHTMLLabel_delka_dopravniku->Top=L+4*O+offset;
			scGPNumericEdit_delka_dopravniku->Top=P+4*O+offset;
			//ty co jsou stejné
			scGPNumericEdit_delka_dopravniku->Options->ShapeStyle=scgpessRect;
			rHTMLLabel_delka_dopravniku->Visible=true;scGPNumericEdit_delka_dopravniku->Visible=true;scGPNumericEdit_delka_dopravniku->Enabled=true;
			/*scGPNumericEdit_delka_dopravniku->Options->FrameColor=hl_color;*/scGPNumericEdit_delka_dopravniku->Options->FrameWidth=1;
			//ty co jsou rozdílné
		 ////funkèní vlastnosti
			switch (S)
			{
				case HIGHLIGHT:/*scGPNumericEdit_delka_dopravniku->Options->FrameColor=hl_color;*/scGPNumericEdit_delka_dopravniku->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scGPNumericEdit_delka_dopravniku->Enabled=false;break;
				case READONLY:scGPNumericEdit_delka_dopravniku->Options->ShapeStyle=scgpessNone;scGPNumericEdit_delka_dopravniku->Enabled=false;break;
				case HIDE:		rHTMLLabel_delka_dopravniku->Visible=false;scGPNumericEdit_delka_dopravniku->Visible=false;offset-=O;break;
			}
		}break;
		case KAPACITA://požadována vs. zjištìná kapacita objektu
		{
		 ////pozice
			rHTMLLabel_kapacita->Top=L+5*O+offset;
			scGPNumericEdit_kapacita->Top=P+5*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			scGPNumericEdit_kapacita->Options->ShapeStyle=scgpessRect;
			rHTMLLabel_kapacita->Visible=true;scGPNumericEdit_kapacita->Visible=true;scGPNumericEdit_kapacita->Enabled=true;
			/*scGPNumericEdit_kapacita->Options->FrameColor=hl_color;*/scGPNumericEdit_kapacita->Options->FrameWidth=1;
			//ty co jsou rozdílné
			switch (S)
			{
				case HIGHLIGHT:/*scGPNumericEdit_kapacita->Options->FrameColor=hl_color;*/scGPNumericEdit_kapacita->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scGPNumericEdit_kapacita->Enabled=false;break;
				case READONLY:scGPNumericEdit_kapacita->Options->ShapeStyle=scgpessNone;scGPNumericEdit_kapacita->Enabled=false;break;
				case HIDE:		rHTMLLabel_kapacita->Visible=false;scGPNumericEdit_kapacita->Visible=false;offset-=O;break;
			}
		}	break;
		case ODCHYLKA://povolená odchylka z CT
		{
		 ////pozice
			rHTMLLabel_odchylka->Top=L+6*O+offset;
			scGPNumericEdit_odchylka->Top=P+6*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			scGPNumericEdit_odchylka->Options->ShapeStyle=scgpessRect;
			rHTMLLabel_odchylka->Visible=true;scGPNumericEdit_odchylka->Visible=true;scGPNumericEdit_odchylka->Enabled=true;
			/*scGPNumericEdit_odchylka->Options->FrameColor=hl_color;*/scGPNumericEdit_odchylka->Options->FrameWidth=1;
			//ty co jsou rozdílné
			switch (S)
			{
				case HIGHLIGHT:/*scGPNumericEdit_odchylka->Options->FrameColor=hl_color;*/scGPNumericEdit_odchylka->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scGPNumericEdit_odchylka->Enabled=false;break;
				case READONLY:scGPNumericEdit_odchylka->Options->ShapeStyle=scgpessNone;scGPNumericEdit_odchylka->Visible=false;break;
				case HIDE:		rHTMLLabel_odchylka->Visible=false;scGPNumericEdit_odchylka->Visible=false;offset-=O;break;
			}
		}	break;
		case CEKANI://èekání
		{
		 ////pozice
			rHTMLLabel_cekani->Top=L+7*O+offset;
			scComboBox_cekani_palec->Top=P+7*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			rHTMLLabel_cekani->Visible=true;scComboBox_cekani_palec->Visible=true;scComboBox_cekani_palec->Enabled=true;
			//ty co jsou rozdílné
			switch (S)
			{
				case HIGHLIGHT:/*scComboBox_cekani_palec->Options->FrameColor=hl_color;*/scComboBox_cekani_palec->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scComboBox_cekani_palec->Enabled=false;break;
				case READONLY:scComboBox_cekani_palec->Enabled=false;break;
				case HIDE:		rHTMLLabel_cekani->Visible=false;scComboBox_cekani_palec->Visible=false;offset-=O;break;
			}
		}	break;
		case STOPKA://stop stanice na konci objektu
		{
		 ////pozice
			rHTMLLabel_stopka->Top=L+8*O+offset;
			scComboBox_stopka->Top=P+8*O+offset;
		 ////funkèní vlastnosti
			//ty co jsou stejné
			rHTMLLabel_stopka->Visible=true;scComboBox_stopka->Visible=true;scComboBox_stopka->Enabled=true;
			//ty co jsou rozdílné
			switch (S)
			{
				case HIGHLIGHT:/*scComboBox_stopka->Options->FrameColor=hl_color;*/scComboBox_stopka->Options->FrameWidth=hlFrameWidth;break;
				case ENABLED:	break;
				case DISABLED:scComboBox_stopka->Enabled=false;break;
				case READONLY:scComboBox_stopka->Enabled=false;break;
				case HIDE:		rHTMLLabel_stopka->Visible=false;scComboBox_stopka->Visible=false;offset-=O;break;
			}
		}	break;
	}
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//pøi psaní názvu objektu se mìní titulek a generuje zkratka
void __fastcall TForm_parametry::scGPEdit_nameChange(TObject *Sender)
{
	 Form_parametry->scLabel_titulek->Caption=scGPEdit_name->Text+" - parametry";
	 scGPEdit_shortname->Text=scGPEdit_name->Text.SubString(1,4).UpperCase();
}
//---------------------------------------------------------------------------
//pøi zmìnách EDITù
void __fastcall TForm_parametry::scGPNumericEdit_CTChange(TObject *Sender)
{
	if(input_state==NOTHING)//pokud není zadáváno z jiného vstupu
	input_CT();//pøepoèet hodnot vyplývajících ze zmìny CT
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::scGPNumericEdit_delka_dopravnikuChange(TObject *Sender)
{
	if(input_state==NOTHING)//pokud není zadáváno z jiného vstupu
	input_DD();//pøepoèet hodnot vyplývajících ze zmìny délky dopravníku
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::scGPNumericEdit_RDChange(TObject *Sender)
{
	if(input_state==NOTHING)//pokud není zadáváno z jiného vstupu
	input_RD();//pøepoèet hodnot vyplývajících ze zmìny RD
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::scGPNumericEdit_kapacitaChange(TObject *Sender)
{
	if(input_state==NOTHING)//pokud není zadáváno z jiného vstupu
	input_K();//pøepoèet hodnot vyplývajících ze zmìny K
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//pøepoèet hodnot vyplývajících ze zmìny CT
void TForm_parametry::input_CT()
{
	 input_state=CT;
	 double CT=scGPNumericEdit_CT->Value;//CT od uživatele
	 if(minsec==SEC)CT=CT/60.0;//pokud bylo zadání v sekundách pøevede na minuty
	 if(CT>0)//nutné ošetøení pro období zadávání/psaní
	 {
    	 //default hodnoty
    	 double TT=Form1->d.v.ZAKAZKY->dalsi->TT;//TT defaultní zakázky
    	 double dV=Form1->d.v.PP.delka_voziku; //delka voziku

    	 double m=0;//mezera mezi voziky
    	 short p=1;//odeètení do správného poètu mezer
			 //default nastavení komponent
			 scGPNumericEdit_kapacita->Decimal=0;
			 vypis("");
    	 scGPButton_OK->Enabled=true;
    	 scGPButton_OK->Caption="Uložit";

    	 //dle øežimu objektu
			 if(scComboBox_rezim->ItemIndex==0)//S&G
			 {
    		 //ošetøení a pøípadnì následné øešení situací, kdy není totožný procesní èas a TT
    		 if(CT<TT)
    		 {
    			scGPButton_OK->Enabled=false;
    		 	vypis("Pozor, procesní èas je nižší než hodnota TT!");
    		 }
    		 if(CT>TT)
				 {
    		 		if(fmod(CT,TT)==0)
    				{
    		 			kapacitaSG=CT/TT;//pro další použití
    					vypis("Rozložit na "+AnsiString(kapacitaSG)+"x "+scGPEdit_name->Text.UpperCase()+"?");
    		 			scGPButton_OK->Enabled=true;
    					scGPButton_OK->Caption="Ano a uložit";
    		 		}
    				else
    		 		{
    					scGPButton_OK->Enabled=false;
    		 			vypis("Zmìnte režim nebo rozložte do více objektù!");
    		 		}
    		 }
    	 }
    	 else//KONTINUAL+PP
			 {
    		 //KAPACITA
    		 double K=CT/TT;//výpoèet
    		 scGPNumericEdit_kapacita->Decimal=Form1->ms.get_count_decimal(K);//nastaví zobrazení poètu desetinných míst
    		 scGPNumericEdit_kapacita->Value=K;//plnìní patøièného políèka
    		 //pokud obsahuje kapacita reálnou èást, vypíše doporuèení
				 if(Form1->ms.get_count_decimal(K)>0)
				 {
					if(minsec==MIN)vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT)+" min.");
					else vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT*60)+" s.");
				 }
				 //DÉLKA DOPRAVNÍKU
				 double DD=K*dV+(K-p)*m;//ošetøeno i pro stav kdy je stejný poèet mezer jako vozíku
				 scGPNumericEdit_delka_dopravniku->Decimal=Form1->ms.get_count_decimal(DD);//nastaví zobrazení poètu desetinných míst
				 scGPNumericEdit_delka_dopravniku->Value=DD;//plnìní patøièného políèka
    		 //RYCHLOST DOPRAVNÍKU (èistì jen pro KONTINUAL)
				 if(scComboBox_rezim->ItemIndex==1)
				 {
					double RD=DD/CT;
					if(minsec==SEC)RD/=60.0;
					scGPNumericEdit_RD->Decimal=Form1->ms.get_count_decimal(RD);//nastaví zobrazení poètu desetinných míst
					scGPNumericEdit_RD->Value=RD;//plnìní patøièného políèka
    		 }
			 }
	 }
	 else
	 null_input_value();
	 input_state=NOTHING;
}
//---------------------------------------------------------------------------
//pøepoèet hodnot vyplývajících ze zmìny DD
void TForm_parametry::input_DD()
{
	input_state=DD;
	//default hodnoty
	double DD=scGPNumericEdit_delka_dopravniku->Value;
	if(DD>0)//nutné ošetøení pro období zadávání/psaní
	{
		double TT=Form1->d.v.ZAKAZKY->dalsi->TT;//TT defaultní zakázky
		double dV=Form1->d.v.PP.delka_voziku; //delka voziku
		double m=0;//mezera mezi voziky
		short p=1;//odeètení do správného poètu mezer
		//default nastavení komponent
		scGPNumericEdit_kapacita->Decimal=0;
		vypis("");
		scGPButton_OK->Enabled=true;
		scGPButton_OK->Caption="Uložit";

		//KAPACITA                 //pokud je stejný poèet mezer jako vozíkù
		double K=(DD+m)/(dV+m);if(p==1)K=DD/(dV+m);
		scGPNumericEdit_kapacita->Decimal=Form1->ms.get_count_decimal(K);//nastaví zobrazení poètu desetinných míst
		scGPNumericEdit_kapacita->Value=K;//plnìní patøièného políèka
		//pokud obsahuje kapacita reálnou èást, vypíše doporuèení
		if(Form1->ms.get_count_decimal(K)>0)
		vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT)+" min.");

		//PROCESNÍ ÈAS resp. CT
		double CT = TT*K;
		if(minsec==SEC)CT*=60.0;
		scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
		scGPNumericEdit_CT->Value=CT;//plnìní patøièného políèka

		//RYCHLOST DOPRAVNÍKU (èistì jen pro KONTINUAL)
		if(scComboBox_rezim->ItemIndex==1)
		{
			double RD = DD/CT;
			if(minsec==SEC)RD/=60.0;
			scGPNumericEdit_RD->Decimal=Form1->ms.get_count_decimal(RD);//nastaví zobrazení poètu desetinných míst
			scGPNumericEdit_RD->Value=RD;//plnìní patøièného políèka
		}
	}
	else
	null_input_value();
	input_state=NOTHING;
}
//---------------------------------------------------------------------------
//pøepoèet hodnot vyplývajících ze zmìny RD, pouze pro kontinual
void TForm_parametry::input_RD()
{
	 input_state=RD;
	 double RD=scGPNumericEdit_RD->Value;
	 if(RD>0)//nutné ošetøení pro období zadávání/psaní
	 {
    	 //default hodnoty
    	 double TT=Form1->d.v.ZAKAZKY->dalsi->TT;//TT defaultní zakázky
    	 double dV=Form1->d.v.PP.delka_voziku; //delka voziku
    	 double m=0;//mezera mezi voziky
    	 short p=1;//odeètení do správného poètu mezer
    	 //default nastavení komponent
			 scGPNumericEdit_kapacita->Decimal=0;
			 vypis("");
    	 scGPButton_OK->Enabled=true;
    	 scGPButton_OK->Caption="Uložit";

    	 double K=0;
    	 if(m>0 && p==1)//pokud je rozdílný poèet mezer jako vozíkù a mezera je nenulova, lze pøímo z RD vypoèítat ostatní hodnoty
    	 {
    			//KAPACITA
    			K=m/(dV+m-RD*TT);
    			scGPNumericEdit_kapacita->Decimal=Form1->ms.get_count_decimal(K);//nastaví zobrazení poètu desetinných míst
    			scGPNumericEdit_kapacita->Value=K;//plnìní patøièného políèka
    			//pokud obsahuje kapacita reálnou èást, vypíše doporuèení
    			if(Form1->ms.get_count_decimal(K)>0)
    			vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT)+" min.");

    			//DÉLKA DOPRAVNÍKU
    			double DD = K*dV+(K-p)*m;
    			scGPNumericEdit_delka_dopravniku->Decimal=Form1->ms.get_count_decimal(DD);//nastaví zobrazení poètu desetinných míst
    			scGPNumericEdit_delka_dopravniku->Value=DD;//plnìní patøièného políèka

    			//PROCESNÍ ÈAS resp. CT
					double CT = RD/DD;
					if(minsec==SEC)CT*=60.0;
    			scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
    			scGPNumericEdit_CT->Value=CT;//plnìní patøièného políèka
    	 }
    	 else //pokud ne, je nutné získat další nenulový vstup
			 {
    			double DD=scGPNumericEdit_delka_dopravniku->Value;
					double CT=scGPNumericEdit_CT->Value;
    			double K=scGPNumericEdit_kapacita->Value;

    			if(DD!=0)//pokud je známá délka dopravníku
    			{
    				//KAPACITA
    				K=RD/DD/TT;
    				scGPNumericEdit_kapacita->Decimal=Form1->ms.get_count_decimal(K);//nastaví zobrazení poètu desetinných míst
    				scGPNumericEdit_kapacita->Value=K;//plnìní patøièného políèka
    				//pokud obsahuje kapacita reálnou èást, vypíše doporuèení
    				if(Form1->ms.get_count_decimal(K)>0)
    				vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT)+" min.");

    				//PROCESNÍ ÈAS resp. CT
						double CT = RD/DD;
						if(minsec==SEC)CT*=60.0;
    				scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
    				scGPNumericEdit_CT->Value=CT;//plnìní patøièného políèka
    			}
    			else
    			{
    				if(CT!=0)//pokud není známá délka ale je známe CT
    				{
        			//DÉLKA DOPRAVNÍKU
        			DD=RD*CT;
    					scGPNumericEdit_delka_dopravniku->Decimal=Form1->ms.get_count_decimal(DD);//nastaví zobrazení poètu desetinných míst
    					scGPNumericEdit_delka_dopravniku->Value=DD;//plnìní patøièného políèka

        			//KAPACITA
        			K=CT/TT;
        			scGPNumericEdit_kapacita->Decimal=Form1->ms.get_count_decimal(K);//nastaví zobrazení poètu desetinných míst
        			scGPNumericEdit_kapacita->Value=K;//plnìní patøièného políèka
    					//pokud obsahuje kapacita reálnou èást, vypíše doporuèení
    					if(Form1->ms.get_count_decimal(K)>0)
    					vypis("Doporuèený procesní èas je: "+AnsiString(Form1->m.round(K)*TT)+" min.");
    				}
    				else
    				{
    					if(K!=0)//pokud není známá délka ani CT a je známá K
    					{
    						//DÉLKA DOPRAVNÍKU
    						DD=RD*TT*K;
    						scGPNumericEdit_delka_dopravniku->Decimal=Form1->ms.get_count_decimal(DD);//nastaví zobrazení poètu desetinných míst
    						scGPNumericEdit_delka_dopravniku->Value=DD;//plnìní patøièného políèka

    						//PROCESNÍ ÈAS resp. CT
								double CT = RD/DD;
								if(minsec==SEC)CT*=60.0;
    						scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
    						scGPNumericEdit_CT->Value=CT;//plnìní patøièného políèka
    					}
    					else//pokud kromì RD není nic zadané a je požadovaná další hodnota
							{
								vypis("Zadejte libovolnou další hodnotu!");
              }
    				}
    			}
			 }
	 }
	 else
	 null_input_value();
	 input_state=NOTHING;
}
//---------------------------------------------------------------------------
//pøepoèet hodnot vyplývajících ze zmìny K
void TForm_parametry::input_K()
{
	 input_state=C;
	 double K=scGPNumericEdit_kapacita->Value;//získání kapacity od uživatele
	 if(K>0)//nutné ošetøení pro období zadávání/psaní
	 {
    	 //default hodnoty
    	 double TT=Form1->d.v.ZAKAZKY->dalsi->TT;//TT defaultní zakázky
    	 double dV=Form1->d.v.PP.delka_voziku; //delka voziku
    	 double m=0;//velikost mezera mezi voziky
    	 short p=1;//odeètení do správného poètu mezer
    	 //default nastavení komponent
    	 scGPNumericEdit_kapacita->Decimal=0;
			 vypis("");
    	 scGPButton_OK->Enabled=true;
    	 scGPButton_OK->Caption="Uložit";

    	 //PROCESNÍ ÈAS resp. CT
    	 double CT = TT*K;
    	 scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
    	 scGPNumericEdit_CT->Value=CT;//plnìní patøièného políèka

    	 //DÉLKA DOPRAVNÍKU
    	 double DD = K*dV+(K-p)*m;//ošetøeno i pro stav stejného poètu vozíku a mezer;
    	 scGPNumericEdit_delka_dopravniku->Decimal=Form1->ms.get_count_decimal(DD);//nastaví zobrazení poètu desetinných míst
    	 scGPNumericEdit_delka_dopravniku->Value=DD;//plnìní patøièného políèka

    	 //RYCHLOST DOPRAVNÍKU (èistì jen pro KONTINUAL)
    	 if(scComboBox_rezim->ItemIndex==1)
			 {
    			double RD=DD/CT;
					scGPNumericEdit_RD->Decimal=Form1->ms.get_count_decimal(RD);//nastaví zobrazení poètu desetinných míst
					scGPNumericEdit_RD->Value=RD;//plnìní patøièného políèka
			 }
	 }
	 else
	 null_input_value();
	 input_state=NOTHING;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//vynuluje vstupní hodnoty
void TForm_parametry::null_input_value()
{
	scGPNumericEdit_RD->Value=0;
	scGPNumericEdit_CT->Value=0;
	scGPNumericEdit_delka_dopravniku->Value=0;
	scGPNumericEdit_kapacita->Value=0;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
void TForm_parametry::vykresli_vozik(bool na_delku)
{ /*ZDM
	Image_vozik->Canvas->Pen->Color=clBtnFace;
	Image_vozik->Canvas->Pen->Width=1;
	Image_vozik->Canvas->Brush->Color=clBtnFace;
	Image_vozik->Canvas->Rectangle(0,0,Image_vozik->Width,Image_vozik->Height);//vybarvení celého
	TPoint stred; stred.x=Image_vozik->Width/2;stred.y=Image_vozik->Height/2;
	double D,S;
	unsigned short meritko=(Image_vozik->Width-6)/Form1->d.v.PP.delka_voziku;
	if(meritko>(Image_vozik->Width-6)/Form1->d.v.PP.sirka_voziku)meritko=(Image_vozik->Width-6)/Form1->PP.sirka_voziku;
	if(meritko>(Image_vozik->Height-6)/Form1->d.v.PP.delka_voziku)meritko=(Image_vozik->Height-6)/Form1->PP.delka_voziku;
	if(meritko>(Image_vozik->Height-6)/Form1->d.v.PP.sirka_voziku)meritko=(Image_vozik->Height-6)/Form1->PP.sirka_voziku;

	if(na_delku){D=Form1->PP.delka_voziku;S=Form1->d.v.PP.sirka_voziku;}
	else{S=Form1->PP.delka_voziku;D=Form1->d.v.PP.sirka_voziku;}

	//packy
	Image_vozik->Canvas->Pen->Color=clBlack;
	Image_vozik->Canvas->Pen->Width=1;
	Image_vozik->Canvas->MoveTo(stred.x-D/2*meritko,stred.y);
	Image_vozik->Canvas->LineTo(stred.x-D/2*meritko-20,stred.y);
	Image_vozik->Canvas->MoveTo(stred.x+D/2*meritko,stred.y);
	Image_vozik->Canvas->LineTo(stred.x+D/2*meritko+20,stred.y);
	//sipka -levá
	Image_vozik->Canvas->Brush->Color=clGray;
	Image_vozik->Canvas->Pen->Color=clBlack;
	Image_vozik->Canvas->Pen->Width=1;
	POINT bodyL[3]={{stred.x-D/2*meritko-13,stred.y-3},{stred.x-D/2*meritko-7,stred.y},{stred.x-D/2*meritko-13,stred.y+3}};
	Image_vozik->Canvas->Polygon((TPoint*)bodyL,2);
	//sipka - pravá
	POINT bodyP[3]={{stred.x+D/2*meritko+7,stred.y-3},{stred.x+D/2*meritko+13,stred.y},{stred.x+D/2*meritko+7,stred.y+3}};
	Image_vozik->Canvas->Polygon((TPoint*)bodyP,2);
	//vozík
	Image_vozik->Canvas->Pen->Width=2;
	Image_vozik->Canvas->Brush->Color=clWhite;
	Image_vozik->Canvas->Rectangle(stred.x-D/2*meritko,stred.y-S/2*meritko,stred.x+D/2*meritko,stred.y+S/2*meritko);
	//popisek
	Image_vozik->Canvas->Font->Size=7;
	Image_vozik->Canvas->TextOutW(stred.x-Image_vozik->Canvas->TextWidth(D)/2,stred.y+S/2*meritko-Image_vozik->Canvas->TextHeight(D)-2,D);
	Image_vozik->Canvas->TextOutW(stred.x-D/2*meritko+2,stred.y-Image_vozik->Canvas->TextHeight(S)/2,S);
	*/
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::RadioButton_na_delkuClick(TObject *Sender)
{
//	 vykresli_vozik(true);//na délku
//	 ValueListEditorStringsChange(Sender);//zajistí pøepoèítání hodnot
}
//---------------------------------------------------------------------------

void __fastcall TForm_parametry::RadioButton_na_sirkuClick(TObject *Sender)
{
//	 vykresli_vozik(false);//na šíøku
//	 ValueListEditorStringsChange(Sender);//zajistí pøepoèítání hodnot
}
//---------------------------------------------------------------------------
void __fastcall TForm_parametry::Image_vozikClick(TObject *Sender)
{
//	 if(RadioButton_na_delku->Checked){RadioButton_na_sirku->Checked=true;RadioButton_na_sirkuClick(Sender);}
//	 else {RadioButton_na_delkuClick(Sender);RadioButton_na_delku->Checked=true;}
}
//---------------------------------------------------------------------------
//pøepínání zobrazení min vs. sec
void __fastcall TForm_parametry::Button_min_secClick(TObject *Sender)
{
	input_state=NO;//zámìr, aby se nepøepoèítavaly hodnoty
	double RD=0;double CT=0;
	if(scGPButton_min_sec->Caption=="na sec")//pøepne na sekundy
	{
		minsec=SEC;scGPButton_min_sec->Caption="na min";//samotné tlaèítko
		//RD
		RD=scGPNumericEdit_RD->Value/60.0;
		rHTMLLabel_RD->Caption="Rychlost dopravníku [m/s]";
		//CT
		CT=scGPNumericEdit_CT->Value*60.0;
		rHTMLLabel_CT->Caption="Technologický èas [s]";
	}
	else//pøepne na minuty
	{
		minsec=MIN;scGPButton_min_sec->Caption="na sec";//samotné tlaèítko
		//RD
		RD=scGPNumericEdit_RD->Value*60.0;
		rHTMLLabel_RD->Caption="Rychlost dopravníku [m/min]";
		//CT
		CT=scGPNumericEdit_CT->Value/60.0;
		rHTMLLabel_CT->Caption="Technologický èas [min]";
	}
	//plnìní + poèet desetinných míst
	scGPNumericEdit_CT->Decimal=Form1->ms.get_count_decimal(CT);//nastaví zobrazení poètu desetinných míst
	scGPNumericEdit_CT->Value=CT;
	scGPNumericEdit_RD->Decimal=Form1->ms.get_count_decimal(RD);//nastaví zobrazení poètu desetinných míst
	scGPNumericEdit_RD->Value=RD;
	input_state=NOTHING;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//pøi stisku klávesy enter nebo esc
void __fastcall TForm_parametry::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)
{
 if(Key==13)//ENTER
 {
		 Form_parametry->ModalResult=mrOk;//vrátí stejnou hodnotu jako tlaèítko
		 Form_parametry->VisibleChanging();//skryje form, stejné jako visible=false
 }
 if(Key==27)//ESC
 {
		 Form_parametry->ModalResult=mrCancel;//vrátí stejnou hodnotu jako tlaèítko
		 Form_parametry->VisibleChanging();//skryje form, stejné jako visible=false
 }
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//pøi stisku storna
void __fastcall TForm_parametry::scGPButton_stornoClick(TObject *Sender)
{
	kapacitaSG=1;//nastaví na default
}
//---------------------------------------------------------------------------
//pøi stisku storna
void __fastcall TForm_parametry::KonecClick(TObject *Sender)
{
	kapacitaSG=1;//nastaví na default
}
//---------------------------------------------------------------------------







